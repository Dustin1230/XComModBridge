//This script was generated by HexToPseudoCode decompiler for use with PatchUPK/PatcherGUI tool
UPK_FILE = XComGame.upk
OBJECT = XGUnit.ApplyInventoryStatModifiers : AUTO
[REPLACEMENT_CODE]

/*
function ApplyInventoryStatModifiers()
{
    local XGGameData.EItemType eWeapon_GameplayType;
    local XGInventory kInventory;
    local XGWeapon kWeapon;
    local array<int> arrBackPackItems;

    eWeapon_GameplayType = 0;
    kInventory = GetInventory();
    // End:0x90
    if(kInventory != none)
    {
        kWeapon = kInventory.GetActiveWeapon();
        // End:0x90
        if(kWeapon != none)
        {
            eWeapon_GameplayType = kWeapon.ItemType();
        }
    }
    XComGameReplicationInfo(Class'Engine.Engine'.static.GetCurrentWorldInfo().GRI).m_kGameCore.GetBackpackItemArray(GetCharacter().m_kChar.kInventory, arrBackPackItems);
    m_aCurrentStats[9] = m_aCurrentStats[0];
    RemoveStatModifiers(m_aInventoryStats);
    XComGameInfo(WorldInfo.Game).Mods[0].Mods("RoulettePlus.RoulettePlusMod").Object(self, true);
    XComGameInfo(WorldInfo.Game).Mods[0].Mods("AllMods", "AISM");
    XComGameReplicationInfo(Class'Engine.Engine'.static.GetCurrentWorldInfo().GRI).m_kGameCore.GetInventoryStatModifiers(m_aInventoryStats, m_kCharacter.m_kChar, eWeapon_GameplayType, arrBackPackItems);
    // End:0x328
    if((m_iWillCheatBonus > 0) && IsAI())
    {
        m_aInventoryStats[0] += (1 + (m_iWillCheatBonus / 25));
    }
    // End:0x356
    if(m_iWillCheatBonus > 0)
    {
        m_aInventoryStats[7] += (0 + (m_iWillCheatBonus / 10));
    }
    AddStatModifiers(m_aInventoryStats);
    // End:0x3EF
    if(m_iWillCheatBonus < 0)
    {
        // End:0x3B8
        if(IsAI())
        {
            m_aCurrentStats[0] = m_aCurrentStats[9];
            SetUnitHP(m_aCurrentStats[0]);            
        }
        else
        {
            // End:0x3D9
            if(m_aCurrentStats[0] <= 0)
            {
                SetUnitHP(1);                
            }
            else
            {
                SetUnitHP(m_aCurrentStats[0]);
            }
        }
    }
    m_aCurrentStats[9] = 0;
    SetUnitHP(Min(GetUnitHP(), GetUnitMaxHP()));
    m_aInventoryStats[3] += m_iCovertOpKills;
    //return;    
}
*/

/*(0x0000/0x0000)*/ 0F 00 <.eWeapon_GameplayType> 24 00 
/*(0x000C/0x0008)*/ 0F 00 <.kInventory> 1B <GetInventory> 16 
/*(0x0020/0x0018)*/ 07 [@label_0x0090] 77 00 <.kInventory> 2A 16 
/*(0x002F/0x0023)*/ 	0F 00 <.kWeapon> 19 00 <.kInventory> [@] <XGInventoryNativeBase.GetActiveWeapon.ReturnValue> 00 ( 1B <GetActiveWeapon> 16 ) 
/*(0x0058/0x0040)*/ 	07 [@label_0x0090] 77 00 <.kWeapon> 2A 16 
/*(0x0067/0x004B)*/ 		0F 00 <.eWeapon_GameplayType> 19 00 <.kWeapon> [@] <XGItem.GameplayType.ReturnValue> 00 ( 1B <ItemType> 16 ) 
/*(0x0090/0x0068)*/ [#label_0x0090]
/*(0x0090/0x0068)*/ 19 19 2E <Class.XComGameReplicationInfo> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComGameReplicationInfo.m_kGameCore> 00 ( 01 <XComGameReplicationInfo.m_kGameCore> ) [@] <NullRef> 00 ( 1B <GetBackpackItemArray> 35 <XGTacticalGameCoreNativeBase.TCharacter.kInventory> <XGTacticalGameCoreNativeBase.TCharacter> 00 00 19 1B <GetCharacter> 16 [@] <XGCharacter.m_kChar> 00 ( 01 <XGCharacter.m_kChar> ) 00 <.arrBackPackItems> 16 ) 
/*(0x0133/0x00D3)*/ 0F 1A 2C 09 01 <XGUnitNativeBase.m_aCurrentStats> 1A 2C 00 01 <XGUnitNativeBase.m_aCurrentStats> 
/*(0x014C/0x00E4)*/ 1B <RemoveStatModifiers> 01 <XGUnitNativeBase.m_aInventoryStats> 16 

		19 19 10 25 19 2E <Class.XComGameInfo> 19 01 <Engine.Actor.WorldInfo> [@] <Engine.WorldInfo.Game> 00 ( 01 <Engine.WorldInfo.Game> ) [@] <XComGameInfo.Mods> 00 ( 01 <XComGameInfo.Mods> ) [@] <NullRef> 00 ( 1B <Mods> 1F <%t "RoulettePlus.RoulettePlusMod"> 16 ) [@] <NullRef> 00 ( 1B <Object> 17 27 16 )
		19 10 25 19 2E <Class.XComGameInfo> 19 01 <Engine.Actor.WorldInfo> [@] <Engine.WorldInfo.Game> 00 ( 01 <Engine.WorldInfo.Game> ) [@] <XComGameInfo.Mods> 00 ( 01 <XComGameInfo.Mods> ) [@] <NullRef> 00 ( 1B <Mods> 1F <%t "AllMods"> 1F <%t "AISM"> 16 )

/*(0x015F/0x00F3)*/ 19 19 2E <Class.XComGameReplicationInfo> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComGameReplicationInfo.m_kGameCore> 00 ( 01 <XComGameReplicationInfo.m_kGameCore> ) [@] <NullRef> 00 ( 1B <GetInventoryStatModifiers> 01 <XGUnitNativeBase.m_aInventoryStats> 19 01 <XGUnitNativeBase.m_kCharacter> [@] <XGCharacter.m_kChar> 00 ( 01 <XGCharacter.m_kChar> ) 00 <.eWeapon_GameplayType> 00 <.arrBackPackItems> 16 ) 
/*(0x0200/0x0158)*/ 07 [@label_0x023B] 82 97 01 <@m_iWillCheatBonus> 25 16 18 [@] ( 1B <IsAI> 16 16 ) 
/*(0x021E/0x0172)*/ 	A1 1A 25 01 <XGUnitNativeBase.m_aInventoryStats> 92 26 91 01 <@m_iWillCheatBonus> 2C 19 16 16 16 
/*(0x023B/0x0187)*/ [#label_0x023B]
/*(0x023B/0x0187)*/ 07 [@label_0x0269] 97 01 <@m_iWillCheatBonus> 25 16 
/*(0x024A/0x0192)*/ 	A1 1A 2C 07 01 <XGUnitNativeBase.m_aInventoryStats> 92 2C 00 91 01 <@m_iWillCheatBonus> 2C 0A 16 16 16 
/*(0x0269/0x01A9)*/ [#label_0x0269]
/*(0x0269/0x01A9)*/ 1B <AddStatModifiers> 01 <XGUnitNativeBase.m_aInventoryStats> 4A 16 
/*(0x027D/0x01B9)*/ 07 [@label_0x0302] 96 01 <@m_iWillCheatBonus> 25 16 
/*(0x028C/0x01C4)*/ 	07 [@label_0x02CB] 1B <IsAI> 16 
/*(0x0299/0x01D1)*/ 		0F 1A 2C 00 01 <XGUnitNativeBase.m_aCurrentStats> 1A 2C 09 01 <XGUnitNativeBase.m_aCurrentStats> 
/*(0x02B2/0x01E2)*/ 		1B <SetUnitHP> 1A 2C 00 01 <XGUnitNativeBase.m_aCurrentStats> 16 
/*(0x02C8/0x01F4)*/ 		06 [@label_0x0302] 
/*(0x02CB/0x01F7)*/ 	[#label_0x02CB]
/*(0x02CB/0x01F7)*/ 	07 [@label_0x02EC] 98 1A 2C 00 01 <XGUnitNativeBase.m_aCurrentStats> 2C 00 16 
/*(0x02DE/0x0206)*/ 		1B <SetUnitHP> 26 16 
/*(0x02E9/0x0211)*/ 		06 [@label_0x0302] 
/*(0x02EC/0x0214)*/ 	[#label_0x02EC]
/*(0x02EC/0x0214)*/ 	1B <SetUnitHP> 1A 2C 00 01 <XGUnitNativeBase.m_aCurrentStats> 16 
/*(0x0302/0x0226)*/ [#label_0x0302]
/*(0x0302/0x0226)*/ 0F 1A 2C 09 01 <XGUnitNativeBase.m_aCurrentStats> 2C 00 
/*(0x0311/0x0231)*/ 1B <SetUnitHP> F9 1B <GetUnitHP> 16 1B <GetUnitMaxHP> 16 16 16 
/*(0x0331/0x0251)*/ A1 1A 2C 03 01 <XGUnitNativeBase.m_aInventoryStats> 01 <@m_iCovertOpKills> 16 
/*(0x0348/0x0260)*/ 04 0B 
/*(0x034A/0x0262)*/ 53 
